 1. What will the following code output?
for (var i = 0; i < 3; i++) {
  setTimeout(function() { alert(i); }, 1000 + i);
}

2. Write a function that would allow you to do this.
var addSix = createBase(6);
addSix(10); // returns 16
addSix(21); // returns 27

3.What will be the output?
z = [4,4]
z.push(z)

console.log(z)
 
Ans: 3rd entry is a Multidimension array 
[4, 4, Array[3]] 

4.What is the out put
var myObject = {

egg: "plant",

func: function() {
              var self = this;   
           console.log("outer func: this.egg = " + this.egg);  
          console.log("outer func: self.egg = " + self.egg);
          (function() {
            console.log("inner func: this.egg = " + this.egg);
            console.log("inner func: self.egg = " + self.egg);
            }());
       }};
"1function"myObject.func();

Ans:outer func:  this.egg = plant
2outer func:  self.egg = plant
3inner func:  this.egg = undefined

4inner func:  self.egg = plant
In the inner function, “self” remains within scope while “this” can no longer refer to “myObject"

6.  (function(){
    return typeof arguments;
  })();
  
  Object
7.   var f = function g(){ return 23; };

typeof g();
  
  Error
  
8.   (function(x){
    delete x;
    return x;
  })(1);
  
  1
  
9. var y = 1, x = y = typeof x;
  x;
  "undeined"
  
10.   (function f(f){
    return typeof f();
  })(function(){ return 1; });
  

"number"
11. var foo = {
    bar: function() { return this.baz; },
    baz: 1
  };
  (function(){
    return typeof arguments[0]();
  })(foo.bar);
  
    "undefined" 
    
  12.   var foo = {
    bar: function(){ return this.baz; },
    baz: 1
  }
  typeof (f = foo.bar)();
  
   "undefined" 
   
 13.  var f = (function f(){ return "1"; }, function g(){ return 2; })();
  typeof f;

number

14. var x = 1;
  if (function f(){}) {
    x += typeof f;
  }
  x;
  
  "1function" 
  

15.  var x = [typeof x, typeof y][1];
  typeof typeof x;
  
  string
  
 16.   (function(foo){
    return typeof foo.bar;
  })({ foo: { bar: 1 } });
 
undefined
17.  (function f(){
    function f(){ return 1; }
    return f();
    function f(){ return 2; }
  })();

2

18. function f(){ return f; }
  new f() instanceof f;
  
  false
  
19.   with (function(x, undefined){}) length;

   2
20. function printMe() { var b = 5; alert (a+b); }
var a = 3; var b = 2;
printMe();
alert(a+b);
  Ans: 8,5
